{"version":3,"sources":["msal/MsalConfig.ts","msal/MsalHandler.ts","api.ts","components/Headers.tsx","components/Auth.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["MsalConfig","config","defaultRequestConfiguration","scopes","UserInfo","accountAvailable","displayName","this","MsalHandler","msalObj","redirect","useStackLogging","requestConfiguration","track","a","UserAgentApplication","handleRedirectCallback","error","response","processLogin","console","instance","createInstance","state","JSON","stringify","loginRedirect","loginPopup","acquireTokenSilent","token","accessToken","AuthError","errorCode","login","account","getAccount","u","name","idToken","accountState","window","location","pathname","message","msg","stack","Error","split","trim","start","indexOf","prefix","substring","debug","log","ax","axios","create","baseURL","msalHandler","getInstance","interceptors","request","use","url","acquireAccessToken","headers","Headers","Array","API","get","then","res","data","setState","map","x","i","key","value","length","React","Component","Claim","Auth","props","claims","handleClick","bind","parseToken","claimData","Object","keys","filter","y","isArray","join","toString","onClick","e","preventDefault","App","user","getUserData","basename","className","to","path","Home","href","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch"],"mappings":"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","file":"static/js/main.8c758358.chunk.js","sourcesContent":["import IRequestConfiguration from \"./IRequestConfiguration\"\n\nexport default class MsalConfig {\n    static config: {\n        auth: {\n            clientId: \"31c0ca04-16fb-49b6-83a2-e8c8487ea4fd\",\n            authority: \"https://login.microsoftonline.com/98a34a88-7940-40e8-af71-913452037f31\",\n            redirectUri: \"http://localhost:3000/auth\",\n            navigateToLoginRequestUrl: false\n        },\n        cache: {\n            cacheLocation: \"sessionStorage\" // session storage is more secure, but prevents single-sign-on from working. other option is 'localStorage'\n        }\n    }\n    // this is marked as the default, as the scopes for individual pages may be different\n    static defaultRequestConfiguration: IRequestConfiguration = {\n        scopes: [\"api://msaljs.jpda.app/power\", \"api://msaljs.jpda.app/wake\"],\n    }\n}","import { UserAgentApplication, AuthResponse, AuthError } from 'msal';\nimport MsalConfig from './MsalConfig';\nimport IRequestConfiguration from \"./IRequestConfiguration\";\n\nclass UserInfo {\n    accountAvailable: boolean;\n    displayName: string;\n    constructor() {\n        this.displayName = \"\";\n        this.accountAvailable = false;\n    }\n}\n\nexport default class MsalHandler {\n    msalObj: UserAgentApplication;\n    redirect: boolean;\n    useStackLogging: boolean;\n\n    // for handling a single instance of the handler, use getInstance() elsewhere\n    static instance: MsalHandler;\n    private static createInstance() {\n        var a = new MsalHandler();\n        return a;\n    }\n\n    public static getInstance() {\n        if (!this.instance) {\n            this.instance = this.createInstance();\n        }\n        return this.instance;\n    }\n\n    // default scopes from configuration\n    private requestConfiguration: IRequestConfiguration = MsalConfig.defaultRequestConfiguration;\n\n    // we want this private to prevent any external callers from directly instantiating, instead rely on getInstance()\n    private constructor() {\n        this.redirect = true;\n        this.useStackLogging = false;\n        this.track(\"ctor: starting\");\n        const a = new UserAgentApplication(MsalConfig.config);\n\n        this.track(\"ctor: setting redirect callbacks\");\n        a.handleRedirectCallback((error, response) => {\n            this.track(\"redirectCallback\");\n            if (response) {\n                this.processLogin(response);\n            }\n            if (error) {\n                console.error(error);\n            }\n        });\n        this.msalObj = a;\n    }\n\n    public async login(redirect?: boolean, state?: string, scopes?: string[]) {\n        this.track(\"entering login; scopes: \" + scopes + \", state: \" + state + \", redirect: \" + redirect);\n        if (state) {\n            this.track(\"Setting state to: \" + state);\n            this.requestConfiguration.state = state;\n        }\n        if (redirect || this.redirect) {\n            this.track(\"redirecting to login with parameters: \" + JSON.stringify(this.requestConfiguration));\n            this.msalObj.loginRedirect(this.requestConfiguration);\n        } else {\n            try {\n                this.track(\"logging in with popup, config: \" + JSON.stringify(this.requestConfiguration));\n                var response = await this.msalObj.loginPopup(this.requestConfiguration);\n                this.track(\"MsalHandler::login: got something: \" + JSON.stringify(response));\n                this.processLogin(response);\n            } catch (e) {\n                console.error(e);\n            }\n        }\n    }\n\n    public async acquireAccessToken(state?: string, redirect?: boolean, scopes?: string[]): Promise<String | null> {\n        if (scopes) {\n            this.requestConfiguration.scopes = scopes;\n        }\n        if (state) {\n            this.track(\"state: \" + state);\n            this.requestConfiguration.state = state;\n        }\n        try {\n            this.track(\"access token silent: \" + JSON.stringify(this.requestConfiguration));\n            var token = await this.msalObj.acquireTokenSilent(this.requestConfiguration);\n            return token.accessToken;\n        } catch (e) {\n            if (e instanceof AuthError) {\n                console.error(\"acquireAccessToken: error: \" + JSON.stringify(e));\n                if (e.errorCode === \"user_login_error\" || e.errorCode === \"consent_required\" || e.errorCode === \"interaction_required\") { // todo: check for other error codes\n                    this.login(redirect, state, this.requestConfiguration.scopes);\n                }\n            }\n            console.error(e);\n        }\n        return null;\n    }\n\n    public getUserData(): UserInfo {\n        var account = this.msalObj.getAccount();\n        var u = new UserInfo();\n        if (account) {\n            u.accountAvailable = true;\n            u.displayName = account.name;\n        }\n        return u;\n    }\n\n    public processLogin(response: AuthResponse | undefined) {\n        this.track(\"processLogin\");\n        if (!response) return;\n        this.track(\"id_token received: \" + response.idToken);\n        this.track(\"access_token received: \" + response.accessToken);\n        this.track(\"state received: \" + response.accountState);\n\n        if (response.accountState) { // we had a redirect from another place in the app before the authentication request\n            this.track(\"got a \" + response.accountState);\n            window.location.pathname = response.accountState;\n        }\n    }\n\n    private track(message: string) {\n        // lol: this is ridiculous - make sure you turn this off with this.useStackLogging = false\n        var msg = \"MsalHandler::\" + message;\n        if (this.useStackLogging) {\n            var e = new Error(\"ok\");\n            var stack = e.stack?.split(\"\\n\")[2].trim();\n            var start = stack?.indexOf(\"(\");\n            var prefix = msg?.substring(3, start).trim();\n            console.debug(prefix + message);\n        }\n        else {\n            console.log(msg);\n        }\n    }\n}","import axios from 'axios';\nimport MsalHandler from './msal/MsalHandler';\n\nconst ax = axios.create({\n    baseURL: `https://saywhat.azurewebsites.net/api/`, // just an echo api - returns headers and query\n});\n\nconst msalHandler = MsalHandler.getInstance();\n\nax.interceptors.request.use(\n    async request => {\n        console.debug(\"api::interceptor: request.url: \" + request.url);\n        var token = await msalHandler.acquireAccessToken(request.url);\n        request.headers[\"Authorization\"] = \"Bearer \" + token;\n        return request;\n    }\n)\n\nexport default ax;","import React from 'react';\nimport API from '../api';\n\nclass RequestValue {\n    key: any;\n    value: any;\n}\n\nexport default class Headers extends React.Component {\n    state = {\n        headers: Array<RequestValue>()\n    }\n\n    componentDidMount() {\n        API.get(`headers`) // axios will handle adding the authorization header\n            .then(res => {\n                const headers = res.data;\n                this.setState({ headers });\n            })\n    }\n\n    render() {\n        return (\n            <div>\n                <h1>Headers received by server</h1>\n                <table>\n                    <thead>\n                        <tr>\n                            <th>key</th>\n                            <th>value</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        {this.state.headers.map((x, i) => <tr key={i}><td>{x.key}</td><td>{x.value.length > 100 ? x.value.substring(0, 100) + \".../snip\" : x.value}</td></tr>)}\n                    </tbody>\n                </table>\n            </div>\n        )\n    }\n}","import React from 'react';\nimport MsalHandler from '../msal/MsalHandler';\n\nexport class Claim {\n    key: string;\n    value: string;\n\n    constructor(key: string, value: string) {\n        this.key = key;\n        this.value = value;\n    }\n}\n\nexport default class Auth extends React.Component {\n    msalHandler: MsalHandler;\n    accountAvailable: boolean;\n\n    constructor(props: any) {\n        super(props);\n        this.msalHandler = MsalHandler.getInstance(); // note this returns the previously instantiated MsalHandler\n        this.handleClick = this.handleClick.bind(this);\n        this.accountAvailable = false;\n    }\n\n    state = {\n        claims: Array<Claim>(),\n    }\n\n    componentDidMount() {\n        var account = this.msalHandler.msalObj.getAccount();\n        if (account) {\n            this.accountAvailable = true;\n        }\n        if (this.accountAvailable) {\n            this.parseToken(this.msalHandler.msalObj.getAccount().idToken);\n        }\n        else { }\n    }\n\n    parseToken(token: any) {\n        var claimData = Object.keys(token).filter(y => y !== \"decodedIdToken\" && y !== \"rawIdToken\").map(x => {\n            return new Claim(x, Array.isArray(token[x]) ? token[x].join(\",\") : token[x].toString());\n        });\n        this.setState({ claims: claimData });\n    }\n\n    render() {\n        if (this.accountAvailable) {\n            return (\n                <div>\n                    <h1>User claims</h1>\n                    <table>\n                        <thead>\n                            <tr>\n                                <th>key</th>\n                                <th>value</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            {this.state.claims.map((x, i) => <tr key={i}><td>{x.key}</td><td>{x.value.length > 75 ? x.value.substring(0, 75) + \".../snip\" : x.value}</td></tr>)}\n                        </tbody>\n                    </table>\n                </div>\n            )\n        } else {\n            return (\n                <div>\n                    <button onClick={this.handleClick}>login</button>\n                </div>\n            )\n        }\n    }\n\n    async handleClick(e: any) {\n        e.preventDefault();\n        console.log(\"clicked\");\n        await this.msalHandler.login();\n    }\n}","import React from 'react';\nimport Headers from './components/Headers';\nimport './App.css';\nimport { BrowserRouter as Router, Switch, Route, Link } from 'react-router-dom';\nimport Auth from './components/Auth';\nimport MsalHandler from './msal/MsalHandler';\n\nexport default function App() {\n  const msal = MsalHandler.getInstance();\n  var user = msal.getUserData();\n  return (\n    <Router basename=\"/msal-axios-intercept\">\n      <div className=\"nav-container\">\n        <nav>\n          <div className=\"left-menu\">\n            <Link to=\"/\">Home</Link>\n            <Link to=\"/auth\">{user.accountAvailable ? \"Claims for \" + user.displayName : \"Login\"}</Link>\n            <Link to=\"/headers\">API + Headers</Link>\n          </div>\n          <Link to=\"/\" className=\"logo\">ok</Link>\n        </nav>\n      </div>\n      <div className=\"container\">\n        <Switch>\n          <Route path=\"/headers\">\n            <Headers />\n          </Route>\n          <Route path=\"/auth\">\n            <Auth />\n          </Route>\n          <Route path=\"/\">\n            <Home />\n          </Route>\n        </Switch>\n      </div>\n    </Router >\n\n  );\n}\nfunction Home() {\n  return (\n    <div>\n      <h1>Home</h1>\n      <p>A simple example using msaljs, loginRedirect and state. Use <a href=\"/auth\">Login</a> to login or view your id_token claims. Use <a href=\"/headers\">API + Headers</a> to make an authenticated API call and echo back the headers received by the server.</p>\n      <p>Code at <a href=\"https://github.com/jpda/msaljs-axios-intercept\">https://github.com/jpda/msaljs-axios-intercept</a></p>\n      </div>\n  )\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}